"use strict";exports.id=5099,exports.ids=[5099],exports.modules={9151:(t,e,i)=>{function n(t){return t.headers.get("x-user-id")}function a(t){return t.headers.get("x-organization-id")}i.d(e,{mk:()=>a,n5:()=>n}),i(8070),i(7439),i(5813)},5813:(t,e,i)=>{i.d(e,{Oe:()=>s,RA:()=>d,WX:()=>c,c_:()=>r});var n=i(6521),a=i(6082);i(8046);let o=process.env.JWT_SECRET||"your-secret-key";async function r(t){return(0,n.hash)(t,10)}async function s(t,e){return(0,n.compare)(t,e)}function d(t,e="7d"){return(0,a.sign)(t,o,{expiresIn:e})}function c(t){try{return(0,a.verify)(t,o)}catch(t){return null}}},8046:(t,e,i)=>{i.d(e,{db:()=>r});var n=i(5900),a=i(4107);let o=new n.Pool({connectionString:process.env.DATABASE_URL,ssl:{rejectUnauthorized:!1},max:20,idleTimeoutMillis:3e4,connectionTimeoutMillis:2e3});o.on("connect",()=>{console.log("Database connection established")}),o.on("error",t=>{console.error("Unexpected database error:",t)});let r={async query(t,e=[]){let i=await o.connect();try{let n=Date.now(),a=await i.query(t,e),o=Date.now()-n;return o>100&&console.log("Slow query:",{text:t,duration:o,rows:a.rowCount}),a}catch(t){(0,a.dy)(t)}finally{i.release()}},async transaction(t){let e=await o.connect();try{await e.query("BEGIN");let i=await t(e);return await e.query("COMMIT"),i}catch(t){await e.query("ROLLBACK"),(0,a.dy)(t)}finally{e.release()}},async insert(t,e){let i=Object.keys(e),n=Object.values(e),a=i.map((t,e)=>`$${e+1}`).join(", "),o=i.join(", "),r=`
      INSERT INTO ${t} (${o})
      VALUES (${a})
      RETURNING *
    `;return(await this.query(r,n)).rows[0]},async update(t,e,i){let n=Object.keys(i),a=Object.values(i),o=n.map((t,e)=>`${t} = $${e+1}`).join(", "),r=`
      UPDATE ${t}
      SET ${o}, updated_at = CURRENT_TIMESTAMP
      WHERE id = $${n.length+1}
      RETURNING *
    `;return(await this.query(r,[...a,e])).rows[0]},async findWithPagination(t,e={},i={}){let{page:n=1,limit:a=20,orderBy:o="created_at",order:r="DESC",fields:s="*"}=i,d=Object.keys(e),c=Object.values(e),u="";d.length>0&&(u="WHERE "+d.map((t,e)=>null===c[e]?`${t} IS NULL`:`${t} = $${e+1}`).join(" AND "));let l=`
      SELECT COUNT(*) as total
      FROM ${t}
      ${u}
    `,E=`
      SELECT ${s}
      FROM ${t}
      ${u}
      ORDER BY ${o} ${r}
      LIMIT ${a} OFFSET ${(n-1)*a}
    `,[_,w]=await Promise.all([this.query(l,c),this.query(E,c)]),m=parseInt(_.rows[0].total);return{data:w.rows,pagination:{page:Number(n),limit:Number(a),total:m,pages:Math.ceil(m/a)}}},async end(){await o.end(),console.log("Database connection pool has ended")}}},4107:(t,e,i)=>{i.d(e,{dR:()=>a,dy:()=>o,p8:()=>n}),i(8070);class n extends Error{constructor(t){super(t),this.name="ValidationError",this.code="VALIDATION_ERROR"}}class a extends Error{constructor(t="Resource"){super(`${t} not found`),this.name="NotFoundError",this.code="NOT_FOUND"}}function o(t){if(console.error("Database error:",t),"23505"===t.code)throw new n("A record with this information already exists");if("23503"===t.code)throw new n("Referenced record does not exist");if("42P01"===t.code)throw Error("Database schema issue: Table does not exist");throw Error("Database operation failed")}},7107:(t,e,i)=>{i.d(e,{Dw:()=>r,Pc:()=>a,V2:()=>d,W$:()=>s,sO:()=>o});var n=i(8046);async function a(t,e){let i=await (0,n.getDB)(),{contact_id:a,user_id:r,title:s,description:d,start_time:c,end_time:u,location:l,meeting_link:E,status:_,reminder_time:w}=t;if(a&&!await (0,n.getRow)(i,"SELECT * FROM contacts WHERE id = ? AND organization_id = ?",[a,e]))throw Error("Contact not found");if(r&&!await (0,n.getRow)(i,"SELECT * FROM users WHERE id = ? AND organization_id = ?",[r,e]))throw Error("User not found");let m=(0,n.generateId)();return await (0,n.insertRow)(i,"appointments",{id:m,organization_id:e,contact_id:a||null,user_id:r||null,title:s,description:d||null,start_time:c,end_time:u,location:l||null,meeting_link:E||null,status:_||"scheduled",reminder_time:w||null,created_at:new Date().toISOString(),updated_at:new Date().toISOString()}),o(m,e)}async function o(t,e){let i=await (0,n.getDB)(),a=await (0,n.getRow)(i,"SELECT * FROM appointments WHERE id = ? AND organization_id = ?",[t,e]);if(!a)throw Error("Appointment not found");return a.contact_id&&(a.contact=await (0,n.getRow)(i,"SELECT id, first_name, last_name, email, phone FROM contacts WHERE id = ?",[a.contact_id])),a.user_id&&(a.user=await (0,n.getRow)(i,"SELECT id, name, email FROM users WHERE id = ?",[a.user_id])),a}async function r(t,e={}){let i=await (0,n.getDB)(),{contact_id:a,user_id:o,status:r,start_date:s,end_date:d,limit:c=50,offset:u=0}=e,l="SELECT * FROM appointments WHERE organization_id = ?",E=[t];a&&(l+=" AND contact_id = ?",E.push(a)),o&&(l+=" AND user_id = ?",E.push(o)),r&&(l+=" AND status = ?",E.push(r)),s&&(l+=" AND start_time >= ?",E.push(s)),d&&(l+=" AND end_time <= ?",E.push(d)),l+=" ORDER BY start_time LIMIT ? OFFSET ?",E.push(c,u);let _=await (0,n.getRows)(i,l,E);for(let t of _)t.contact_id&&(t.contact=await (0,n.getRow)(i,"SELECT id, first_name, last_name, email, phone FROM contacts WHERE id = ?",[t.contact_id])),t.user_id&&(t.user=await (0,n.getRow)(i,"SELECT id, name, email FROM users WHERE id = ?",[t.user_id]));return _}async function s(t,e,i){let a=await (0,n.getDB)(),r=await o(t,e);if(i.contact_id&&i.contact_id!==r.contact_id&&!await (0,n.getRow)(a,"SELECT * FROM contacts WHERE id = ? AND organization_id = ?",[i.contact_id,e]))throw Error("Contact not found");if(i.user_id&&i.user_id!==r.user_id&&!await (0,n.getRow)(a,"SELECT * FROM users WHERE id = ? AND organization_id = ?",[i.user_id,e]))throw Error("User not found");let s={contact_id:void 0!==i.contact_id?i.contact_id:r.contact_id,user_id:void 0!==i.user_id?i.user_id:r.user_id,title:void 0!==i.title?i.title:r.title,description:void 0!==i.description?i.description:r.description,start_time:void 0!==i.start_time?i.start_time:r.start_time,end_time:void 0!==i.end_time?i.end_time:r.end_time,location:void 0!==i.location?i.location:r.location,meeting_link:void 0!==i.meeting_link?i.meeting_link:r.meeting_link,status:void 0!==i.status?i.status:r.status,reminder_time:void 0!==i.reminder_time?i.reminder_time:r.reminder_time,updated_at:new Date().toISOString()};return await (0,n.updateRow)(a,"appointments",s,"id = ? AND organization_id = ?",[t,e]),o(t,e)}async function d(t,e){let i=await (0,n.getDB)();await o(t,e),await (0,n.deleteRow)(i,"appointments","id = ? AND organization_id = ?",[t,e])}}};