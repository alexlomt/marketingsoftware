"use strict";exports.id=7984,exports.ids=[7984],exports.modules={9151:(e,t,r)=>{function i(e){return e.headers.get("x-user-id")}function o(e){return e.headers.get("x-organization-id")}r.d(t,{mk:()=>o,n5:()=>i}),r(8070),r(7439),r(5813)},5813:(e,t,r)=>{r.d(t,{Oe:()=>s,RA:()=>c,WX:()=>g,c_:()=>n});var i=r(6521),o=r(6082);r(8046);let a=process.env.JWT_SECRET||"your-secret-key";async function n(e){return(0,i.hash)(e,10)}async function s(e,t){return(0,i.compare)(e,t)}function c(e,t="7d"){return(0,o.sign)(e,a,{expiresIn:t})}function g(e){try{return(0,o.verify)(e,a)}catch(e){return null}}},8046:(e,t,r)=>{r.d(t,{db:()=>n});var i=r(5900),o=r(4107);let a=new i.Pool({connectionString:process.env.DATABASE_URL,ssl:{rejectUnauthorized:!1},max:20,idleTimeoutMillis:3e4,connectionTimeoutMillis:2e3});a.on("connect",()=>{console.log("Database connection established")}),a.on("error",e=>{console.error("Unexpected database error:",e)});let n={async query(e,t=[]){let r=await a.connect();try{let i=Date.now(),o=await r.query(e,t),a=Date.now()-i;return a>100&&console.log("Slow query:",{text:e,duration:a,rows:o.rowCount}),o}catch(e){(0,o.dy)(e)}finally{r.release()}},async transaction(e){let t=await a.connect();try{await t.query("BEGIN");let r=await e(t);return await t.query("COMMIT"),r}catch(e){await t.query("ROLLBACK"),(0,o.dy)(e)}finally{t.release()}},async insert(e,t){let r=Object.keys(t),i=Object.values(t),o=r.map((e,t)=>`$${t+1}`).join(", "),a=r.join(", "),n=`
      INSERT INTO ${e} (${a})
      VALUES (${o})
      RETURNING *
    `;return(await this.query(n,i)).rows[0]},async update(e,t,r){let i=Object.keys(r),o=Object.values(r),a=i.map((e,t)=>`${e} = $${t+1}`).join(", "),n=`
      UPDATE ${e}
      SET ${a}, updated_at = CURRENT_TIMESTAMP
      WHERE id = $${i.length+1}
      RETURNING *
    `;return(await this.query(n,[...o,t])).rows[0]},async findWithPagination(e,t={},r={}){let{page:i=1,limit:o=20,orderBy:a="created_at",order:n="DESC",fields:s="*"}=r,c=Object.keys(t),g=Object.values(t),d="";c.length>0&&(d="WHERE "+c.map((e,t)=>null===g[t]?`${e} IS NULL`:`${e} = $${t+1}`).join(" AND "));let w=`
      SELECT COUNT(*) as total
      FROM ${e}
      ${d}
    `,l=`
      SELECT ${s}
      FROM ${e}
      ${d}
      ORDER BY ${a} ${n}
      LIMIT ${o} OFFSET ${(i-1)*o}
    `,[f,u]=await Promise.all([this.query(w,g),this.query(l,g)]),_=parseInt(f.rows[0].total);return{data:u.rows,pagination:{page:Number(i),limit:Number(o),total:_,pages:Math.ceil(_/o)}}},async end(){await a.end(),console.log("Database connection pool has ended")}}},4107:(e,t,r)=>{r.d(t,{dR:()=>o,dy:()=>a,p8:()=>i}),r(8070);class i extends Error{constructor(e){super(e),this.name="ValidationError",this.code="VALIDATION_ERROR"}}class o extends Error{constructor(e="Resource"){super(`${e} not found`),this.name="NotFoundError",this.code="NOT_FOUND"}}function a(e){if(console.error("Database error:",e),"23505"===e.code)throw new i("A record with this information already exists");if("23503"===e.code)throw new i("Referenced record does not exist");if("42P01"===e.code)throw Error("Database schema issue: Table does not exist");throw Error("Database operation failed")}},8815:(e,t,r)=>{r.d(t,{$B:()=>o,Eg:()=>a,_I:()=>c,rI:()=>s,vq:()=>n});var i=r(8046);async function o(e,t){let r=await (0,i.getDB)(),{name:o,trigger_type:n,trigger_config:s,steps:c}=e,g=(0,i.generateId)();if(await (0,i.insertRow)(r,"workflows",{id:g,organization_id:t,name:o,trigger_type:n,trigger_config:s?JSON.stringify(s):null,is_active:!1,created_at:new Date().toISOString(),updated_at:new Date().toISOString()}),c&&Array.isArray(c)&&c.length>0)for(let e=0;e<c.length;e++){let t=c[e];await (0,i.insertRow)(r,"workflow_steps",{id:(0,i.generateId)(),workflow_id:g,step_type:t.step_type,step_config:JSON.stringify(t.step_config||{}),order_index:e,created_at:new Date().toISOString(),updated_at:new Date().toISOString()})}return a(g,t)}async function a(e,t){let r=await (0,i.getDB)(),o=await (0,i.getRow)(r,"SELECT * FROM workflows WHERE id = ? AND organization_id = ?",[e,t]);if(!o)throw Error("Workflow not found");o.trigger_config&&(o.trigger_config=JSON.parse(o.trigger_config));let a=await (0,i.getRows)(r,"SELECT * FROM workflow_steps WHERE workflow_id = ? ORDER BY order_index",[e]);return o.steps=a.map(e=>({...e,step_config:JSON.parse(e.step_config)})),o}async function n(e,t={}){let r=await (0,i.getDB)(),{is_active:o,trigger_type:a,limit:n=50,offset:s=0}=t,c="SELECT * FROM workflows WHERE organization_id = ?",g=[e];void 0!==o&&(c+=" AND is_active = ?",g.push(o?1:0)),a&&(c+=" AND trigger_type = ?",g.push(a)),c+=" ORDER BY name LIMIT ? OFFSET ?",g.push(n,s);let d=await (0,i.getRows)(r,c,g);for(let e of d){e.trigger_config&&(e.trigger_config=JSON.parse(e.trigger_config));let t=await (0,i.getRows)(r,"SELECT * FROM workflow_steps WHERE workflow_id = ? ORDER BY order_index",[e.id]);e.steps=t.map(e=>({...e,step_config:JSON.parse(e.step_config)}))}return d}async function s(e,t,r){let o=await (0,i.getDB)(),n=await a(e,t),s={name:void 0!==r.name?r.name:n.name,trigger_type:void 0!==r.trigger_type?r.trigger_type:n.trigger_type,trigger_config:void 0!==r.trigger_config?JSON.stringify(r.trigger_config):n.trigger_config?JSON.stringify(n.trigger_config):null,is_active:void 0!==r.is_active?r.is_active:n.is_active,updated_at:new Date().toISOString()};if(await (0,i.updateRow)(o,"workflows",s,"id = ? AND organization_id = ?",[e,t]),r.steps&&Array.isArray(r.steps)){await (0,i.deleteRow)(o,"workflow_steps","workflow_id = ?",[e]);for(let t=0;t<r.steps.length;t++){let a=r.steps[t];await (0,i.insertRow)(o,"workflow_steps",{id:(0,i.generateId)(),workflow_id:e,step_type:a.step_type,step_config:JSON.stringify(a.step_config||{}),order_index:t,created_at:new Date().toISOString(),updated_at:new Date().toISOString()})}}return a(e,t)}async function c(e,t){let r=await (0,i.getDB)();await a(e,t),await (0,i.deleteRow)(r,"workflow_steps","workflow_id = ?",[e]),await (0,i.deleteRow)(r,"workflows","id = ? AND organization_id = ?",[e,t])}}};